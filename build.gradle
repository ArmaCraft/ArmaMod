buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name 'forge'
            url 'https://files.minecraftforge.net/maven'
        }
        maven {
            name 'sponge'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:4.1.1'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'

targetCompatibility = sourceCompatibility = 1.8

version = '1.2'
group = 'org.armacraft'

ext {
    downloadedFilesFolder = new File(buildDir, 'downloaded-files')
}

repositories {
    maven {
        name 'cursemaven'
        url 'https://www.cursemaven.com'
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    google()
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            taskName 'runClient ArmaCraft'

            workingDirectory project.file('run')

            // Faz com que seja possivel executar o CD pela IDE sem ter problemas com os refMaps
            // Properties sao enfiadas nos Arguments da Run enquanto a run eh gerada por genEclipseRuns/genIntellijRuns, por exemplo.
            // E eh adicionado um prefixo -D, ficando tipo assim: '-Dmixin.env...'
            property 'mixin.env.disableRefMap', 'true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Isso aqui acaba indo no "program arguments"
            args '--mixin', 'armacraft.mixins.json'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName 'runServer ArmaCraft'

            workingDirectory project.file('run')

            // Faz com que seja possivel executar o CD pela IDE sem ter problemas com os refMaps
            // Properties sao enfiadas nos Arguments da Run enquanto a run eh gerada por genEclipseRuns/genIntellijRuns, por exemplo.
            // E eh adicionado um prefixo -D, ficando tipo assim: '-Dmixin.env...'
            property 'mixin.env.disableRefMap', 'true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Isso aqui acaba indo no "program arguments"
            args '--mixin', 'armacraft.mixins.json'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName 'runData ArmaCraft'

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Isso aqui acaba indo no "program arguments"
            args '--mixin', 'armacraft.mixins.json'

            mods {
                armacraft {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
    implementation group: 'org.spongepowered', name: 'mixin', version: "0.8.2"
    annotationProcessor("org.spongepowered:mixin:0.8.2:processor")
    implementation fg.deobf("curse.maven:crafting_dead_core-${cd_curseforge_project_id}:${cd_curseforge_file_id}")
    implementation 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'
    implementation fileTree(dir: downloadedFilesFolder, include: ['*.jar'])
}

jar {
    manifest {
        attributes([
                "Specification-Title": "examplemod",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "armacraft.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "armacraft.refmap.json"
}

task deleteDownloads(type: Delete) {
    delete downloadedFilesFolder
}

task downloadFiles(type: Download) {
    dependsOn deleteDownloads
    doFirst {
        // Creates the folder
        downloadedFilesFolder.mkdirs();
    }
    src([
            'https://github.com/IzzelAliz/Arclight/releases/download/1.16%2F1.0.17/arclight-forge-1.16-1.0.17.jar'
    ])
    dest downloadedFilesFolder
    overwrite false
}

compileJava.options.encoding = 'UTF-8'
compileJava.dependsOn(downloadFiles)