buildscript {
    repositories {
        jcenter()
        mavenCentral()
		maven {
		    url "https://libraries.minecraft.net"
		}
        maven {
            name 'forge'
            url 'https://files.minecraftforge.net/maven'
        }
        maven {
            name 'sponge'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
	    maven {
	    	url "https://plugins.gradle.org/m2/"
	    }
	    google()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:4.1.1'
        classpath 'com.guardsquare:proguard-gradle:7.0.0'
    }
}

import org.gradle.api.InvalidUserDataException;

if (!project.hasProperty("target")) {
    throw new InvalidUserDataException("Target must be either 'server' or 'client'");
}

import java.io.ByteArrayOutputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.io.FileUtils;
import org.apache.tools.ant.filters.ReplaceTokens;

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'

targetCompatibility = sourceCompatibility = 1.8

ext {
	target = project.getProperty("target")
	downloadedFilesFolder = new File(buildDir, 'downloaded-files')
	parsedFolder = new File(buildDir.getParent(), './build/parsed')
	stringObfuscator = false
	lastCommitShortHash = 'git rev-parse --short HEAD'.execute().text.trim()
	revision = 'git rev-list --count HEAD'.execute().text.trim()
	manifestAttributes = [
                "Specification-Title": "ArmaCraft",
                "Specification-Vendor": "ArmaCraftMC",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ArmaCraftMC",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "armacraft.mixins.json"
    ];
    srgFile = new File(".", "build/createMcpToSrg/output.tsrg");
}

// Se tiver ${}, é necessário chamar .toString()
version = "${mod_version}.${revision}-${lastCommitShortHash}".toString()
group = 'org.armacraft'

repositories {
    maven {
        name 'cursemaven'
        url 'https://www.cursemaven.com'
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    google()
	maven {
	    url "https://libraries.minecraft.net"
	}
}

sourceSets {
    gradle {
        java {
            srcDirs = ['src/gradle/java']
        }
        resources {
            srcDirs = ['src/gradle/resources']
        }
    }
}

if (target == 'client') {
	sourceSets {
		main {
			java {
				srcDirs = ['build/parsed/java']
			}
			resources {
				srcDirs = ['build/parsed/resources']
			}
			compileClasspath += project.configurations.runtimeClasspath
		}
	}
}

configurations {
    gradleImplementation.extendsFrom implementation
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

task deleteCurrentSource(type: Delete) {
   delete '$buildDir/src'
}

task processTokens(type: Copy) {
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
    	FULL_MOD_VERSION: version
    ])
    into "$buildDir/src"
}

compileJava {
    source = processTokens.outputs
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            taskName 'runClient ArmaCraft'

            workingDirectory project.file('run')

            // Faz com que seja possivel executar o CD pela IDE sem ter problemas com os refMaps
            // Properties sao enfiadas nos Arguments da Run enquanto a run eh gerada por genEclipseRuns/genIntellijRuns, por exemplo.
            // E eh adicionado um prefixo -D, ficando tipo assim: '-Dmixin.env...'
            property 'mixin.env.disableRefMap', 'true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Isso aqui acaba indo no "program arguments"
            args '--mixin', 'armacraft.mixins.json'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName 'runServer ArmaCraft'

            workingDirectory project.file('run')

            // Faz com que seja possivel executar o CD pela IDE sem ter problemas com os refMaps
            // Properties sao enfiadas nos Arguments da Run enquanto a run eh gerada por genEclipseRuns/genIntellijRuns, por exemplo.
            // E eh adicionado um prefixo -D, ficando tipo assim: '-Dmixin.env...'
            property 'mixin.env.disableRefMap', 'true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Isso aqui acaba indo no "program arguments"
            args '--mixin', 'armacraft.mixins.json'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName 'runData ArmaCraft'

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Isso aqui acaba indo no "program arguments"
            args '--mixin', 'armacraft.mixins.json'

            mods {
                armacraft {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
    implementation group: 'org.spongepowered', name: 'mixin', version: "0.8.2"
    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
    implementation fg.deobf("curse.maven:crafting_dead_core-${cd_curseforge_project_id}:${cd_curseforge_file_id}")
    implementation 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'
    implementation fileTree(dir: downloadedFilesFolder, include: ['*.jar'])
    
    // Only for 'gradle' sourceset
    gradleImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
}

jar {
    manifest {
        attributes(manifestAttributes)
    }
    archiveFileName = 'ArmaMod-server-unobf.jar'
}

jar.finalizedBy('reobfJar')

build.finalizedBy 'encryptJars'

if (target == 'client') {
    jar.archiveFileName = 'ArmaMod-client-unobf.jar'
    compileJava.dependsOn "copyAndProcessSourcesForPublic"
	build.finalizedBy 'processClientJars'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task deleteParsed(type: Delete) {
   delete 'build/parsed'
}

task copyAndProcessSourcesForPublic(type: Copy) {
	dependsOn deleteParsed
    from 'src/main'
    into 'build/parsed'
    filter { String line ->
    	if (line.contains("@StringObfuscator:on")) {
    		stringObfuscator = true;
    	}
    	
    	if (line.contains("@StringObfuscator:off")) {
    		stringObfuscator = false;
    	}
    	
    	if (!stringObfuscator) {
    		return line;
    	}
    	
		Pattern pattern = Pattern.compile("\"([^\"]*?)\"");
		Matcher matcher = pattern.matcher(line);

		StringBuffer sb = new StringBuffer();
		while (matcher.find()) {

			String teste = matcher.group();
			String withoutQuotes = teste.substring(1, teste.length() - 1);
			StringBuilder bytes = new StringBuilder();
    		
			boolean isFirst = true;

			for (byte b : withoutQuotes.getBytes()) {
				if (!isFirst) {
					bytes.append(",");
				}
				isFirst = false;

				String hexString = "0x" + Integer.toHexString(b);
				bytes.append(hexString);
			}
			String escaped = "new String(new byte[] { " + bytes.toString() + " })";
			matcher.appendReplacement(sb, escaped);
			
			println("Obfuscating text from "+teste+" to "+escaped)
		}
		
		matcher.appendTail(sb);
		
		return sb.toString();
    }
}

task deleteDownloads(type: Delete) {
    delete downloadedFilesFolder
}

def packageNameGenerator = { String alphabet, int minimumSize, int maxSize ->
	def size = (new Random().nextInt(maxSize - minimumSize)) + minimumSize;
	new Random().with {
		(1..size).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
	}
}

def defaultPackageAlphabet = ('a'..'z').join();

task preProcessProguardConf(type: Copy) {
	from 'proguard-input.conf'
    into '.'
   	rename { 'proguard-output.conf' }
    filter(ReplaceTokens, tokens: [
    	// Esconder dentro dos packages do CDA AUHSUHASUHAUH
    	RANDOM_PACKAGE_NAME: 'com.craftingdead.core.'+packageNameGenerator(defaultPackageAlphabet, 4, 7)
    ])
}

task applyProguard(type: proguard.gradle.ProGuardTask) {
	dependsOn preProcessProguardConf
    configuration 'proguard-output.conf'

    injars jar.destinationDirectory.file('ArmaMod-client-unobf.jar')
    outjars jar.destinationDirectory.file('ArmaMod-client.jar')
    
    printmapping 'proguard.map'
}

task deleteUnobf(type: Delete) {
    delete jar.destinationDirectory.file('ArmaMod-client-unobf.jar')
}

task processClientJars() {
	finalizedBy "applyProguard"
}

task encryptJars(type: JavaExec) {
	dependsOn deleteUnobf
	classpath = sourceSets.gradle.runtimeClasspath
	main = 'org.armacraft.gradle.EncryptJarsTask'
	shouldRunAfter 'processClientJars'
}

mixin {
    add sourceSets.main, "armacraft.refmap.json"
}		

task downloadFiles(type: Download) {
	doFirst {
		// Creates the folder
		downloadedFilesFolder.mkdirs();
	}
	src([
		'https://github.com/IzzelAliz/Arclight/releases/download/1.16%2F1.0.17/arclight-forge-1.16-1.0.17.jar'
	])
	dest downloadedFilesFolder
	overwrite false
    onlyIfModified true
}

compileJava.options.encoding = 'UTF-8'
compileJava.dependsOn(downloadFiles)